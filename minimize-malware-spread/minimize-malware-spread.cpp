class Solution {
public:
    void dfs(vector<vector<int>>& g,unordered_map<int,vector<int>> &m,vector<bool> &v,int node,int par){
        if(v[node])
            return;
        v[node]=1;
        m[node].push_back(par);
        int n=g.size();
        for(int i=0;i<n;i++){
            if(g[node][i]&&!v[i]){
                dfs(g,m,v,i,par);
                v[i]=1;
            };
        };
    };
    int minMalwareSpread(vector<vector<int>>& g, vector<int>& initial) {
        int n=g.size();
        unordered_map<int,vector<int>> m;
        for(int node: initial){
            vector<bool> v(n,0);
            dfs(g,m,v,node,node);
        };
        unordered_map<int,int> mp;
        for(auto i:m){
            if(i.second.size()==1){
                mp[i.second[0]]++;
            };
        };
        int ans=INT_MAX,infected=INT_MIN;
        for(auto i:mp){
            if(i.second>infected){
                infected=i.second;
                ans=i.first;
            }else if(i.second==infected&&ans>i.first){
                ans=i.first;
            };
        };
        if(ans==INT_MAX)ans=*min_element(initial.begin(),initial.end());
        return ans;
    }
};